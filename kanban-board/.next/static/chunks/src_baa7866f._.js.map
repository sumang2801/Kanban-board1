{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/suman/Kanban-board1-2/kanban-board/src/gql/graphql.ts"],"sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n};\n\nexport type Continent = {\n  __typename?: 'Continent';\n  code: Scalars['ID']['output'];\n  countries: Array<Country>;\n  name: Scalars['String']['output'];\n};\n\nexport type ContinentFilterInput = {\n  code?: InputMaybe<StringQueryOperatorInput>;\n};\n\nexport type Country = {\n  __typename?: 'Country';\n  awsRegion: Scalars['String']['output'];\n  capital?: Maybe<Scalars['String']['output']>;\n  code: Scalars['ID']['output'];\n  continent: Continent;\n  currencies: Array<Scalars['String']['output']>;\n  currency?: Maybe<Scalars['String']['output']>;\n  emoji: Scalars['String']['output'];\n  emojiU: Scalars['String']['output'];\n  languages: Array<Language>;\n  name: Scalars['String']['output'];\n  native: Scalars['String']['output'];\n  phone: Scalars['String']['output'];\n  phones: Array<Scalars['String']['output']>;\n  states: Array<State>;\n  subdivisions: Array<Subdivision>;\n};\n\n\nexport type CountryNameArgs = {\n  lang?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type CountryFilterInput = {\n  code?: InputMaybe<StringQueryOperatorInput>;\n  continent?: InputMaybe<StringQueryOperatorInput>;\n  currency?: InputMaybe<StringQueryOperatorInput>;\n  name?: InputMaybe<StringQueryOperatorInput>;\n};\n\nexport type Language = {\n  __typename?: 'Language';\n  code: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  native: Scalars['String']['output'];\n  rtl: Scalars['Boolean']['output'];\n};\n\nexport type LanguageFilterInput = {\n  code?: InputMaybe<StringQueryOperatorInput>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  continent?: Maybe<Continent>;\n  continents: Array<Continent>;\n  countries: Array<Country>;\n  country?: Maybe<Country>;\n  language?: Maybe<Language>;\n  languages: Array<Language>;\n};\n\n\nexport type QueryContinentArgs = {\n  code: Scalars['ID']['input'];\n};\n\n\nexport type QueryContinentsArgs = {\n  filter?: InputMaybe<ContinentFilterInput>;\n};\n\n\nexport type QueryCountriesArgs = {\n  filter?: InputMaybe<CountryFilterInput>;\n};\n\n\nexport type QueryCountryArgs = {\n  code: Scalars['ID']['input'];\n};\n\n\nexport type QueryLanguageArgs = {\n  code: Scalars['ID']['input'];\n};\n\n\nexport type QueryLanguagesArgs = {\n  filter?: InputMaybe<LanguageFilterInput>;\n};\n\nexport type State = {\n  __typename?: 'State';\n  code?: Maybe<Scalars['String']['output']>;\n  country: Country;\n  name: Scalars['String']['output'];\n};\n\nexport type StringQueryOperatorInput = {\n  eq?: InputMaybe<Scalars['String']['input']>;\n  in?: InputMaybe<Array<Scalars['String']['input']>>;\n  ne?: InputMaybe<Scalars['String']['input']>;\n  nin?: InputMaybe<Array<Scalars['String']['input']>>;\n  regex?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type Subdivision = {\n  __typename?: 'Subdivision';\n  code: Scalars['ID']['output'];\n  emoji?: Maybe<Scalars['String']['output']>;\n  name: Scalars['String']['output'];\n};\n\nexport type GetCountriesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCountriesQuery = { __typename?: 'Query', countries: Array<{ __typename?: 'Country', code: string, name: string }> };\n\n\nexport const GetCountriesDocument = gql`\n    query GetCountries {\n  countries {\n    code\n    name\n  }\n}\n    `;\n\n/**\n * __useGetCountriesQuery__\n *\n * To run a query within a React component, call `useGetCountriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCountriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCountriesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCountriesQuery(baseOptions?: Apollo.QueryHookOptions<GetCountriesQuery, GetCountriesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCountriesQuery, GetCountriesQueryVariables>(GetCountriesDocument, options);\n      }\nexport function useGetCountriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCountriesQuery, GetCountriesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCountriesQuery, GetCountriesQueryVariables>(GetCountriesDocument, options);\n        }\nexport function useGetCountriesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetCountriesQuery, GetCountriesQueryVariables>) {\n          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}\n          return Apollo.useSuspenseQuery<GetCountriesQuery, GetCountriesQueryVariables>(GetCountriesDocument, options);\n        }\nexport type GetCountriesQueryHookResult = ReturnType<typeof useGetCountriesQuery>;\nexport type GetCountriesLazyQueryHookResult = ReturnType<typeof useGetCountriesLazyQuery>;\nexport type GetCountriesSuspenseQueryHookResult = ReturnType<typeof useGetCountriesSuspenseQuery>;\nexport type GetCountriesQueryResult = Apollo.QueryResult<GetCountriesQuery, GetCountriesQueryVariables>;"],"names":[],"mappings":";;;;;;;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;AAQA,MAAM,iBAAiB,CAAC;AAoIjB,MAAM,uBAAuB,CAAA,GAAA,iJAAA,CAAA,MAAG,AAAD;AAwB/B,SAAS,qBAAqB,WAAoF;;IACjH,MAAM,UAAU;QAAC,GAAG,cAAc;QAAE,GAAG,WAAW;IAAA;IAClD,OAAO,mKAAA,CAAA,WAAe,CAAgD,sBAAsB;AAC9F;GAHU;;;;;AAIT,SAAS,yBAAyB,WAAwF;;IACvH,MAAM,UAAU;QAAC,GAAG,cAAc;QAAE,GAAG,WAAW;IAAA;IAClD,OAAO,uKAAA,CAAA,eAAmB,CAAgD,sBAAsB;AAClG;IAHQ;;;;;AAIT,SAAS,6BAA6B,WAA+G;;IAClJ,MAAM,UAAU,gBAAgB,oKAAA,CAAA,YAAgB,GAAG,cAAc;QAAC,GAAG,cAAc;QAAE,GAAG,WAAW;IAAA;IACnG,OAAO,2KAAA,CAAA,mBAAuB,CAAgD,sBAAsB;AACtG;IAHQ","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///home/suman/Kanban-board1-2/kanban-board/src/lib/apollo-client.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst apolloClient = new ApolloClient({\n  uri: process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT || 'https://countries.trevorblades.com/',\n  cache: new InMemoryCache(),\n});\n\nexport default apolloClient;"],"names":[],"mappings":";;;AAGO;AAHP;AAAA;;AAEA,MAAM,eAAe,IAAI,6KAAA,CAAA,eAAY,CAAC;IACpC,KAAK,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,4BAA4B,IAAI;IACjD,OAAO,IAAI,2KAAA,CAAA,gBAAa;AAC1B;uCAEe","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///home/suman/Kanban-board1-2/kanban-board/src/app/countries/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useQuery } from '@apollo/client';\nimport { GetCountriesDocument, type Country } from '@/gql/graphql'; // Import Country type\nimport apolloClient from '@/lib/apollo-client';\n\nexport default function Page() {\n  const { loading, error, data } = useQuery(GetCountriesDocument, {\n    client: apolloClient,\n  });\n\n  if (loading) return <p className=\"p-4\">Loading countries...</p>;\n  if (error) return <p className=\"p-4 text-red-500\">Error: {error.message}</p>;\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Countries List</h1>\n      <ul className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n        {data?.countries?.map((country: Country) => ( // Add type annotation here\n          <li \n            key={country.code} \n            className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\"\n          >\n            <div className=\"flex items-center\">\n              <span className=\"text-2xl mr-2\">{country.emoji}</span>\n              <div>\n                <h2 className=\"font-semibold\">{country.name}</h2>\n                <p className=\"text-sm text-gray-500\">{country.code}</p>\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA,kNAAoE,sBAAsB;AAC1F;;;AAJA;;;;AAMe,SAAS;QAYf;;IAXP,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,mKAAA,CAAA,WAAQ,AAAD,EAAE,wHAAA,CAAA,uBAAoB,EAAE;QAC9D,QAAQ,iIAAA,CAAA,UAAY;IACtB;IAEA,IAAI,SAAS,qBAAO,6LAAC;QAAE,WAAU;kBAAM;;;;;;IACvC,IAAI,OAAO,qBAAO,6LAAC;QAAE,WAAU;;YAAmB;YAAQ,MAAM,OAAO;;;;;;;IAEvE,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAA0B;;;;;;0BACxC,6LAAC;gBAAG,WAAU;0BACX,iBAAA,4BAAA,kBAAA,KAAM,SAAS,cAAf,sCAAA,gBAAiB,GAAG,CAAC,CAAC,wBACrB,6LAAC;wBAEC,WAAU;kCAEV,cAAA,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAK,WAAU;8CAAiB,QAAQ,KAAK;;;;;;8CAC9C,6LAAC;;sDACC,6LAAC;4CAAG,WAAU;sDAAiB,QAAQ,IAAI;;;;;;sDAC3C,6LAAC;4CAAE,WAAU;sDAAyB,QAAQ,IAAI;;;;;;;;;;;;;;;;;;uBAPjD,QAAQ,IAAI;;;;;;;;;;;;;;;;AAe7B;GA7BwB;;QACW,mKAAA,CAAA,WAAQ;;;KADnB","debugId":null}}]
}